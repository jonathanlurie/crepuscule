{"version":3,"file":"crepuscule.umd.js","sources":["../src/crepuscule.ts"],"sourcesContent":["import {\n  Map,\n  addProtocol,\n  RequestParameters,\n  ResponseCallback,\n  Cancelable,\n  Source\n} from \"@maptiler/sdk\";\n\n// import TileWorker from './worker?worker';\n\n// @ts-ignore\nimport TileWorker from './tile-worker?worker&inline'\n\nconst CREPUSCULE_PROTOCOL_NAMESPACE_PATTERN = \"crepuscule_protocole_<UNIQUE>\";\nconst CREPUSCULE_SOURCE_ID_PATTERN = \"crepuscule_source_<UNIQUE>\";\nconst CREPUSCULE_LAYER_ID_PATTERN = \"crepuscule_layer_<UNIQUE>\";\n\n\nexport type Color = [number, number, number];\n\n\nexport type CrepusculeOptions = {\n  color?: Color,\n  opacity?: number,\n  date?: Date,\n  debug?: boolean,\n}\n\nexport type TransitionOptions = {\n  duration?: number,\n  delay?: number,\n}\n\nconst defaultOptions: CrepusculeOptions = {\n  color: [0, 0, 17],\n  opacity: 0.7,\n  date: new Date(),\n  debug: false,\n}\n\n\nexport class Crepuscule {\n  private map: Map;\n  private color: Color;\n  private opacity: number;\n  private date: Date;\n  private unique: string;\n  private protocolNamespace: string;\n  private tileUriPattern: string;\n  private layerId: string;\n  private sourceId: string;\n  private debug: boolean;\n  private source!: Source;\n\n\n  constructor(map: Map, options: CrepusculeOptions = {}) {\n    const optionsWithDefault: CrepusculeOptions = {\n      ... defaultOptions,\n      ... options,\n    };\n\n    this.map = map;\n    this.color = (optionsWithDefault.color as Color).slice() as Color;\n    this.opacity = optionsWithDefault.opacity as number;\n    this.date = optionsWithDefault.date as Date;\n    this.debug = optionsWithDefault.debug as boolean;\n    \n    this.unique = (Math.random() + 1).toString(36).substring(2);\n    this.protocolNamespace = CREPUSCULE_PROTOCOL_NAMESPACE_PATTERN.replace(\"<UNIQUE>\", this.unique);\n    this.tileUriPattern = `${this.protocolNamespace}://{z}-{x}-{y}-${+this.date}`\n    this.layerId = CREPUSCULE_LAYER_ID_PATTERN.replace(\"<UNIQUE>\", this.unique);\n    this.sourceId = CREPUSCULE_SOURCE_ID_PATTERN.replace(\"<UNIQUE>\", this.unique);\n  }\n\n\n  async generateTilePixelOnWorker(x: number, y: number, z: number, timestamp: number) {\n    return new Promise((resolve) => {\n      \n      \n      // const tileWorker = new TileWorker(); //Worker(\"tileWorker.js\");\n\n      const tileWorker = new TileWorker();\n\n      \n\n\n      // const tileWorker = new Worker(\n      //   new URL('./tile-worker.js', import.meta.url),\n      //   {type: 'module'}\n      // );\n\n\n      tileWorker.postMessage({x, y, z, timestamp, color: this.color, debug: this.debug});\n    \n      tileWorker.onmessage = (evt: MessageEvent<any>) => {\n        resolve(evt.data)\n      };\n    })\n  }\n\n\n\n  init() {\n    // Adding the protocole\n    addProtocol(this.protocolNamespace, (params: RequestParameters, callback: ResponseCallback<any>): Cancelable => {\n      if (!params.url) throw new Error(\"\");\n\n      const [z, x, y, timestamp] = ((params.url.split(\"/\") as Array<string>).pop() as string).split(\"-\").map((el: string): number => parseFloat(el));\n    \n      this.generateTilePixelOnWorker(x, y, z, timestamp)\n      .then((arrbuff) => {\n        callback(null, arrbuff, null, null);\n      })\n      return { cancel: () => { } };\n    });\n\n    // Adding the source\n    this.map.addSource(this.sourceId, {\n      type: \"raster\",\n        tiles: [this.tileUriPattern],\n        tileSize: 512\n    });\n\n    this.source = this.map.getSource(this.sourceId) as Source;\n  \n    // adding the layer\n    this.map.addLayer({\n      id: this.layerId, \n      type: \"raster\",\n      source: this.sourceId,\n      paint: {\n        // @ts-ignore\n        \"raster-opacity-transition\": {duration: 1000, delay: 0},\n        \"raster-opacity\": this.opacity,\n      }\n    })\n  }\n\n\n  setOpacity(o: number, options: TransitionOptions = {}) {\n    this.opacity = o;\n    this.map.setPaintProperty(this.layerId, \"raster-opacity-transition\", {duration: 0, delay: 0, ...options});\n    this.map.setPaintProperty(this.layerId, \"raster-opacity\", o, {validate: false})\n  }\n\n\n  hide(options: TransitionOptions = {}) {\n    this.setOpacity(0, options);\n  }\n  \n  \n  show(options: TransitionOptions = {}) {\n    this.setOpacity(this.opacity, options);\n  }\n\n\n  setDate(date: Date) {\n    this.date = date;\n    this.tileUriPattern = `${this.protocolNamespace}://{z}-{x}-{y}-${+this.date}`;\n    // @ts-ignore\n    this.source.tiles[0] = this.tileUriPattern;\n    // @ts-ignore\n    this.source.load();\n  }\n\n}\n\n\n\n\n\n\n\nexport class CrepusculeLive {\n  private opacity: number;\n  private crA: Crepuscule;\n  private crB: Crepuscule;\n  private usingA: boolean;\n  private intervalId!: NodeJS.Timeout | null;\n\n\n  constructor(map: Map, options: CrepusculeOptions = {}) {\n    const optionsWithDefault = {\n      ... defaultOptions,\n      ... options,\n    };\n\n    this.opacity = optionsWithDefault.opacity as number;\n\n    if (optionsWithDefault.debug) {\n      this.crA = new Crepuscule(map, {...optionsWithDefault, color: [70, 0, 0]});\n      this.crB = new Crepuscule(map, {...optionsWithDefault, opacity: 0, color: [0, 0, 70]});\n    } else {\n      this.crA = new Crepuscule(map, optionsWithDefault);\n      this.crB = new Crepuscule(map, {...optionsWithDefault, opacity: 0});\n    }\n    \n    this.usingA = true;\n    this.intervalId = null;\n  }\n\n\n  init() {\n    this.crA.init();\n    this.crB.init();\n    this.start();\n  }\n  \n\n  start() {\n    this.intervalId = setInterval(() => {\n      this._update();\n    }, 2000)\n  }\n\n  stop() {\n    // @ts-ignore\n    clearInterval(this.intervalId);\n    this.intervalId = null;\n  }\n\n\n  _update() {\n    console.log(\"updating\");\n    const toHide = this.usingA ? this.crA : this.crB;\n    const toShow = this.usingA ? this.crB : this.crA;\n    this.usingA = !this.usingA;\n\n    toShow.setDate(new Date());\n\n    // Wait some time to make sure the tiles are created\n    toHide.setOpacity(0, {duration: 0, delay: 1000});\n    toShow.setOpacity(this.opacity, {duration: 0, delay: 1000});\n  }\n}\n\n// TODO: add the unmount\n"],"names":["TileWorker","addProtocol"],"mappings":"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"}